/** @param {NS} ns **/

// TODO: This is n^2, see if I need to ever optimize it
export function algorithmic_stock_trader_1(inp) {
    var i = 0;
    var max_profit = 0;
    while(i < inp.length) {
        var j = i + 1;
        while (j < inp.length) {
            max_profit = Math.max(inp[j] - inp[i], max_profit);
            j += 1;
        }
        i += 1;
    }
    return max_profit;
}

export function solve_contract(filename, host) {
    var type = ns.codingcontract.getContractType(filename, host);
    var inp = ns.codingcontract.getData(filename, host);
    if(type == "Algorithmic Stock Trader I") {
        algorithmic_stock_trader_1(inp);
        ns.codingcontract.attempt(answer, filename, host)
    } else if(type == "Find Largest Prime Factor") {
    } else if(type == "Subarray with Maximum Sum") {
    } else if(type == "Total Ways to Sum") {
    } else if(type == "Spiralize Matrix") {
    } else if(type == "Array Jumping Game") {
    } else if(type == "Merge Overlapping Intervals") {
    } else if(type == "Generate IP Addresses") {
    } else if(type == "Algorithmic Stock Trader I") {
    } else if(type == "Algorithmic Stock Trader II") {
    } else if(type == "Algorithmic Stock Trader III") {
    } else if(type == "Algorithmic Stock Trader IV") {
    } else if(type == "Minimum Path Sum in a Triangle") {
    } else if(type == "Unique Paths in a Grid I") {
    } else if(type == "Unique Paths in a Grid I") {
    } else if(type == "Unique Paths in a Grid II") {
    } else if(type == "Sanitize Parentheses in Expression") {
    } else if(type == "Find All Valid Math Expressions") {
    } else {
        return False;
    }
}
