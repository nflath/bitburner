/** @param {NS} ns **/
var HOME_RESERVED_RAM = 20;

var SCRIPTS = ["hack.ns", "grow.ns", "weaken.ns", "early-hack-template.ns"];
var HOME = "home";
var PORT_OPENING_FILES = {
        "BruteSSH.exe" : function(ns,server) { ns.brutessh(server); },
        "FTPCrack.exe" : function(ns,server) { ns.ftpcrack(server); },
        "HTTPWorm.exe" : function(ns,server) { ns.httpworm(server); },
        "relaySMTP.exe": function(ns,server) { ns.relaysmtp(server); },
        "SQLInject.exe": function(ns,server) { ns.sqlinject(server); },
};

var from = {};
async function contruct_from_map(ns) {
    await for_each_server(ns, async function(ns, server) {
        var servers = await ns.scan(server);
        for(let child_server of servers) {
            if(!(child_server in from)) {
                from[child_server] = server;
            }
        }
    });
}

// Takes a function and execute it on every reachable server
export async function for_each_server(ns, fn) {
    async function for_each_server_h(ns, server, fn, from) {
        var servers = await ns.scan(server);
        await fn(ns, server);
        for (let item of servers) {
            if (item != from) {
                await for_each_server_h(ns, item, fn, server);
            }
        }
    }
    await for_each_server_h(ns, "home", fn, "");
}

async function path_from_home(ns, target) {
    await contruct_from_map(ns);
    var path = [];
    while(target != "home" && target in from) {
        path.unshift(target);
        target = from[path];
    }
    return path;
}

async function path_to_home(ns, target) {
    await contruct_from_map(ns);
    var path = [];
    target = from[target];
    while(target != "home" && target in from) {
        path.push(target);
        target = from[path];
    }
    path.push("home");
    return path;
}

async function connect_path(ns, path) {
    ns.print(path);
    for(let i=0; i < path.length; i++) {
        await ns.connect(path[i]);
    }
}

// Get the max ram for a particular server.
// Home is adjusted downwards so that manual test scripts can be run.
// TODO: Can we replace the ns.getServerMaxRam with this?
export async function get_server_max_ram(ns, server) {
    var server_max_ram = await ns.getServerMaxRam(server);
    if (server == HOME) {
        return server_max_ram - HOME_RESERVED_RAM;
    }
    return server_max_ram;
}

export async function get_server_available_ram(ns, server) {
    var server_ram = await ns.getServerMaxRam(server) - await ns.getServerUsedRam(server);;
    if (server == HOME) {
        return server_ram - HOME_RESERVED_RAM;
    }
    return server_ram;
}

// Returns total RAM in the network.
export async function get_total_ram(ns) {
    var total_ram = 0;
    await for_each_server(ns, async function(ns, server) {
        total_ram += await get_server_max_ram(ns, server);
    });
    return total_ram;
}

// Returns total RAM in the network.
export async function get_total_available_ram(ns) {
    var total_ram = 0;
    await for_each_server(ns, async function(ns, server) {
        total_ram += await ns.getServerMaxRam(server) - await ns.getServerUsedRam(server);;
    });
    return total_ram-HOME_RESERVED_RAM;
}

// Starts the given script/target combination on all reachable servers.
// TODO: Expand to a normal arglist.
export async function install_script_on_all_servers(ns, script, target) {
    await for_each_server(ns, async function (ns, server) {
        if (ns.hasRootAccess(server)) {
            var num_threads = Math.floor( (await get_server_max_ram(ns, server) - await ns.getServerUsedRam(server)) / await ns.getScriptRam(script));
            if (num_threads > 0) {
                await ns.exec(script, server, num_threads, target);
            }
        }
    });
}

// Performs setup on all reachable nodes:
//  1. Gets root access on all reachable servers.  Copies
//  2. Copies over all  relevant scripts
//  3. Kills all copies of the scripts running.
//  4. Installs backdoor on server
var backdoored = {};
export async function setup_servers(ns) {
    await for_each_server(ns, async function (ns, server) {
        var files = await ns.ls("home");
        var num_server_ports_can_open = 0;
        for(let file in PORT_OPENING_FILES) {
            if(files.includes(file)) {
                PORT_OPENING_FILES[file](ns,server);
                num_server_ports_can_open += 1;
            }
        }

        var can_nuke = await ns.getServerNumPortsRequired(server) <= num_server_ports_can_open;
        var has_root = await ns.hasRootAccess(server);

        if (can_nuke && !has_root) {
            await ns.nuke(server);
        }
        /*ns.print("Server in backdoored:", server in backdoored);
        if(!(server in backdoored)) {
            await connect_path(ns, path_from_home(ns, server));
            await ns.installBackdoor();
            await connect_path(ns, path_to_home(ns, server));
        }*/

        if (server != HOME) {
            for (let script of SCRIPTS) {
                await ns.scp(script, HOME, server);
            }
        }

        for (let script of SCRIPTS) {
            await ns.scriptKill(script, server);
        }
    });
}

// Returns whether the given script is running anywhere on our network.
export async function running(ns, script, ...args) {
    var result = false;
    var reason = null;
    await for_each_server(ns, async function(ns, server) {
        var processes = ns.ps(server);
        for(let i = 0; i < processes.length; ++i) {
            if(processes[i].filename == script) {
                var arg_missing = false;
                for(let arg of args) {
                    arg_missing |= !(arg in processes[i].args) ;
                }
                result |= !arg_missing;
            }
        }
    });

    return result;
}

async function GetAllHackableServers(ns) {
    var hackable_servers = [];
    var hacking_level = ns.getHackingLevel();
    await for_each_server(ns, async function (ns, server) {
        if(ns.hasRootAccess(server) && ns.getServerMaxMoney(server) != 0) {
            var required_hacking_level = ns.getServerRequiredHackingLevel(server);
            if (required_hacking_level * 4 < hacking_level) {
                hackable_servers.push(server);
            }
        }
    });
    return hackable_servers;
}

export async function run_script(ns, script, threads, ...args) {
    var remaining_threads = threads;
    var server_ran = null;
    await for_each_server(ns, async function(ns, server) {
        ns.print(threads, "  ", remaining_threads, " ", server_ran, " ", script);
        if(remaining_threads > 0 && ns.hasRootAccess(server)) {
            var num_threads_can_run = (await get_server_available_ram(ns, server))
            / await ns.getScriptRam(script);
            var threads_to_run = Math.min(num_threads_can_run, remaining_threads);
            ns.print("server: ", server, "theads: ", threads_to_run);
            if(threads_to_run > 0 && threads_to_run == remaining_threads) {
                remaining_threads -= threads_to_run;
                server_ran = server;
                ns.exec(script, server, threads_to_run, ...args);

            }
        }
    });
}
