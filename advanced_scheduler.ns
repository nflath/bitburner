import { running, get_total_ram, get_total_available_ram, for_each_server, run_script } from "util.ns";

async function GetAllHackableServers(ns) {
    var hackable_servers = [];
    var hacking_level = ns.getHackingLevel();
    await for_each_server(ns, async function (ns, server) {
        if(ns.hasRootAccess(server) && ns.getServerMaxMoney(server) != 0) {
            var required_hacking_level = ns.getServerRequiredHackingLevel(server);
            if (required_hacking_level * 4 < hacking_level) {
                hackable_servers.push(server);
            }
        }
    });
    return hackable_servers;
}

var UNKNOWN = 0;
var INITIALIZING = 1;
var RUNNING = 2;

class AdvancedScheduler {
    constructor(ns) {
        this.server_to_state = {};
        this.initializing_threads = 4000;
        this.ns = ns;
    }
    async initialize(ns) {
    }
    async tick(ns) {
        for(let server of await GetAllHackableServers(this.ns)) {

            if(!(server in this.server_to_state)) {
                this.server_to_state[server] = INITIALIZING;
            }
            if(this.server_to_state[server] == INITIALIZING) {

                if (await running(this.ns, "grow.ns", server) ||
                    await running(this.ns, "weaken.ns", server)) {
                    this.ns.print("Already running: ", server);
                    continue;
                }

                var must_initialize = false;

                if (this.ns.getServerMaxMoney(server) > this.ns.getServerMoneyAvailable(server)) {
                    must_initialize = true;
                    await run_script(this.ns, "grow.ns", grow_threads, server);
                }
                if (must_initialize ||
                    (this.ns.getServerSecurityLevel(server) > this.ns.getServerMinSecurityLevel(server))) {
                    must_initialize = true;
                    await run_script(this.ns, "weaken.ns", weaken_threads, server);
                }
                if(!must_initialize) {
                    this.server_to_state[server] = RUNNING;
                }
            }
            if(this.server_to_state[server] == RUNNING) {
                var hack_time = this.ns.formulas.hacking.hackTime(this.ns.getServer(server), this.ns.getPlayer());
                var grow_time = this.ns.formulas.hacking.growTime(this.ns.getServer(server), this.ns.getPlayer());
                var weaken_time = this.ns.formulas.hacking.weakenTime(this.ns.getServer(server), this.ns.getPlayer());

                var money = this.ns.getServerMoneyAvailable(server);
                var max_money = this.ns.getServerMaxMoney(server);

                var hack_percent =  (this.ns.formulas.hacking.hackPercent(this.ns.getServer(server), this.ns.getPlayer()));
                var hack_threads = Math.floor(.25 / hack_percent);

                var grow_threads = 1;
                var grow_percent = this.ns.formulas.hacking.growPercent(this.ns.getServer(server),1, this.ns.getPlayer());
                var max_grow_threads = 1000;
                while(grow_percent < 34 && grow_threads < max_grow_threads) {
                    grow_percent = this.ns.formulas.hacking.growPercent(
                        this.ns.getServer(server),
                        grow_threads,
                        this.ns.getPlayer());

                    grow_threads += 1;
                }

                 // TODO: Make this the correct amount, based on the server's max security level
                var weaken_threads = 2000;
                var available_ram = await get_total_available_ram(this.ns);
                var tried = false;
                var ram_for_attempt = (grow_threads*this.ns.getScriptRam("grow.ns") +
                                       hack_threads*this.ns.getScriptRam("hack.ns") +
                                       weaken_threads*this.ns.getScriptRam("weaken.ns"));

                if(ram_for_attempt < available_ram) {
                    await run_script(this.ns, "grow.ns", grow_threads,    server, weaken_time - grow_time + 200, Date.now());
                    await run_script(this.ns, "weaken.ns", weaken_threads, server, 400, Date.now());
                    await run_script(this.ns, "hack.ns", hack_threads,    server, weaken_time - hack_time, Date.now());
                }

                this.ns.print("Hack time: ", hack_time, " ", grow_time, " ", weaken_time);
                this.ns.print("Hack %: ", hack_percent, " ", grow_percent);
                this.ns.print("Threads: ", grow_threads, " ", hack_threads, " ", weaken_threads,  " ", grow_threads*this.ns.getScriptRam("grow.ns") + hack_threads*this.ns.getScriptRam("hack.ns") + " " +  weaken_threads*this.ns.getScriptRam("weaken.ns"), " ", available_ram);
            }
        }
    }
}

export function GetAdvancedScheduler(ns) {
    return new AdvancedScheduler(ns);
}
